"""
Django settings for dancertix project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

# This file contains only the settings that will remain the same through
# the software development cycle. Settings that change from stage to
# stage in development are pulled out into dev_sqlite3.py, dev_oracle.py,
# integration.py, cloud.py, and cloud.py. Each of those files will import
# this one.

import os
import sys
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.setdefault('SECRET_KEY', 'z3_r&d8dv)-q)fv(6pu*^_#3&ezh((!%xi*5x6#1x4=y!#2_89')

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third party apps
    'crispy_forms',
    'bootstrap_pagination',
    'social_django',
    'django_filters',
    'rest_framework',

    'authauth',         # contains stubs for cloudauth
    'dancertix',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'conf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'conf.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# Database information is not specified here; look in the
# file settings/dev_sqlite3.py etc. for the settings relevant
# to each stage of development.

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# There are three settings associated with paths and static files:
#
#      STATIC_URL ......... This tells Django how to render a url for static files.
#      STATICFILES_DIRS ... This tells Django where to look for static files,
#                           beyond application static directories, when DEBUG=True.
#      STATIC_ROOT ........ This names the directory into which "manage.py collectstatic"
#                           will gather the static files when it's time to move to the
#                           integration server.

STATIC_URL = '/public/'
STATIC_ROOT = os.path.join(BASE_DIR, "public")
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# STATICFILES_DIRS = [
# 	# os.path.join( BASE_DIR, 'static' ),
# ]


CRISPY_FAIL_SILENTLY = True

# Let the crispy-forms package know that it should use Bootstrap4 markup.
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Auth/Auth settings

LOGIN_ERROR_URL = '/error/'
LOGIN_REDIRECT_URL = '/'

AUTHENTICATION_BACKENDS = (
    'cloudauth.backends.CognitoNIH',
    'cloudauth.backends.CognitoGoogle',
)

CSRF_COOKIE_HTTPONLY = True

CSRF_COOKIE_SECURE = True


DATABASES = {
    'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
}


__log_level = os.environ.get('DJANGO_LOG_LEVEL', 'INFO')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('%(asctime)s [%(process)d] [%(levelname)s] ' +
                       'pathname=%(pathname)s lineno=%(lineno)s ' +
                       'funcname=%(funcName)s %(message)s'),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': __log_level,
            'propagate': True,
        },
        'dancertix': {
            'handlers': ['console'],
            'level': __log_level,
            'propagate': True
        }
    }
}

